// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4
#include <dt-bindings/zmk/outputs.h>


/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

combos {
        compatible = "zmk,combos";

        esc_sd {
            bindings = <&kp ESCAPE>;
            key-positions = <11 12>;
        };

        tab_we {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        spot_xc_command_enter {
            bindings = <&kp LG(SPACE)>;
            key-positions = <21 22>;
        };

        del_io {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
        };

        enter_kl {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };

        toggleMode_dot_comma {
            bindings = <&kp CAPSLOCK>;
            key-positions = <27 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T              &kp Y        &kp U  &kp I      &kp O    &kp P
HRML(A,S,D,F)  &kp G              &kp H        HRMR(J,K,L,SEMICOLON)
&kp Z  &kp X  &kp C  &kp V  &kp B              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 1  &lt 2 BACKSPACE    &lt 3 SPACE  &mo 4
            >;
        };

        layer_1 {
            bindings = <
&kp LG(GRAVE)     &kp LG(TAB)       &kp LA(NUMBER_6)  &kp LA(N7)        &kp LA(N8)          &kp LG(LC(LEFT))        &kp LG(LS(M))   &kp LG(LS(C))     &kp LG(LC(RIGHT))  &trans
&kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp LA(NUMBER_4)  &kp LA(NUMBER_5)    &kp LS(LG(LEFT_ARROW))  &kp LG(LS(UP))  &kp LG(LS(DOWN))  &kp LS(LG(RIGHT))  &trans
&kp LG(Z)         &kp LG(X)            &kp LG(C)            &kp LG(V)            &trans&trans                  &trans          &trans            &trans             &trans
                                                      &trans            &trans              &trans                  &trans
            >;
        };

        layer_2 {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(NUMBER_6)  &kp LS(AMPS)  &kp LS(STAR)  &trans  &trans
&kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6            &kp N7        &kp N8        &kp N9  &kp N0
&trans        &trans      &trans         &trans        &trans           &trans            &trans        &trans        &trans  &trans
                                         &trans        &trans           &trans            &trans
            >;
        };

        layer_3 {
            bindings = <
&kp TILDE  &kp MINUS       &kp UNDER         &kp SQT               &trans    &trans  &kp DOUBLE_QUOTES      &kp EQUAL           &kp PLUS         &kp PIPE
&kp GRAVE  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &trans    &trans  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp NON_US_BACKSLASH
&trans     &trans          &trans            &trans                &trans    &trans  &trans                 &trans             &trans           &trans
                                             &trans                &trans    &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp HOME        &kp PAGE_DOWN      &kp PAGE_UP      &kp END     &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT        &kp DOWN           &kp UP           &kp RIGHT   &kp LG(LC(LA(M)))
&trans  &trans  &trans  &trans  &trans    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_PLAY_PAUSE
                        &trans  &trans    &trans          &trans
            >;
        };
    };
};
